name: Build & Deploy

concurrency:
  group: 'workflow = ${{ github.workflow }}, ref = ${{ github.event.ref }}, pr = ${{ github.event.pull_request.id }}'
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

env:
  WRANGLER_SEND_METRICS: false
  DO_NOT_TRACK: 1

on:
  push:
    branches: [main, released]
  pull_request:
    branches: [main]
jobs:
  setup-stage:
    timeout-minutes: 1
    outputs:
      env-name: ${{ steps.env-name.outputs.env }}
    runs-on: ubuntu-latest
    steps:
      - name: Setup environment name
        id: env-name
        run: |
          if [[ ${GITHUB_HEAD_REF} == dev/* || ${GITHUB_HEAD_REF} == renovate/* ]]; then
            echo "env=development" >> $GITHUB_OUTPUT
          elif [[ "${{github.ref}}" == "refs/heads/main" && "${{github.event_name}}" == "push" ]]; then
            echo "env=staging" >> $GITHUB_OUTPUT
          elif [[ "${{github.ref}}" == "refs/heads/released" && "${{github.event_name}}" == "push" ]]; then
            echo "env=production" >> $GITHUB_OUTPUT
          else
            echo "env=development" >> $GITHUB_OUTPUT
          fi

  lint:
    timeout-minutes: 5
    name: Lint ‚úÖ
    needs: [setup-stage]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Check Environment
        run: |
          echo "Environment: ${{ needs.setup-stage.outputs.env-name }}"

      - name: Setup
        uses: ./.github/actions/setup-node

      - name: Lint App
        shell: bash
        run: |
          pnpm run lint

  test:
    timeout-minutes: 8
    name: Test üß™
    needs: [setup-stage]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Check Environment
        run: |
          echo "Environment: ${{ needs.setup-stage.outputs.env-name }}"

      - name: Setup
        uses: ./.github/actions/setup-node

      - name: Test App
        shell: bash
        run: |
          pnpm run test

  build-deploy:
    timeout-minutes: 10
    name: Build üèóÔ∏è & Deploy üöÄ
    environment: ${{ needs.setup-stage.outputs.env-name }}
    needs: [setup-stage, lint, test]
    if: contains(fromJson('["production"]'), needs.setup-stage.outputs.env-name)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Check Environment
        run: |
          echo "Environment: ${{ needs.setup-stage.outputs.env-name }}"

      - name: Setup
        uses: ./.github/actions/setup-node

      - name: Build
        run: |
          pnpm build:cf
          pnpm deploy:cf
        env:
          NITRO_PRESET: cloudflare_module
          CF_WORKER_NAME: ${{ secrets.CF_WORKER_NAME }}
          CF_ROUTE_PATTERN: ${{ secrets.CF_ROUTE_PATTERN }}
          CF_ROUTE_ZONE_NAME: ${{ secrets.CF_ROUTE_ZONE_NAME }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CF_LOG_ENABLED: 'true'
